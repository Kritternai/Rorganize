const sqlite3 = require("sqlite3").verbose();
const bcrypt = require("bcryptjs");

const db = new sqlite3.Database("rorganize.db", (err) => {
  if (err) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", err.message);
  } else {
    console.log("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    createTables();
  }
});

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
const createTables = () => {
  console.log("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á...");

  // üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (admin, user)
  db.run(`
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      username TEXT UNIQUE NOT NULL COLLATE NOCASE,
      password TEXT NOT NULL,
      role TEXT NOT NULL COLLATE NOCASE CHECK(role IN ('admin', 'user')),
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `);

  // üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
  db.run(`
    CREATE TABLE IF NOT EXISTS rooms (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      room_number TEXT UNIQUE NOT NULL COLLATE NOCASE,
      type TEXT NOT NULL COLLATE NOCASE,
      floor INTEGER NOT NULL,
      size INTEGER NOT NULL,
      rent_price REAL NOT NULL,
      deposit REAL NOT NULL,
      water_price REAL NOT NULL,
      electricity_price REAL NOT NULL,
      status TEXT DEFAULT 'available' COLLATE NOCASE CHECK(status IN ('available', 'occupied', 'reserved', 'maintenance')),
      facilities TEXT, -- JSON ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å
      description TEXT COLLATE NOCASE,
      cover_image TEXT,
      images TEXT, -- JSON ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡πâ‡∏≠‡∏á
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `);

  // üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤
  db.run(`
    CREATE TABLE IF NOT EXISTS tenants (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      fullname TEXT NOT NULL COLLATE NOCASE,
      email TEXT UNIQUE NOT NULL COLLATE NOCASE,
      phone TEXT NOT NULL,
      emergency_contact TEXT COLLATE NOCASE,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `);

  // üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤
  db.run(`
    CREATE TABLE IF NOT EXISTS contracts (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      tenant_id INTEGER NOT NULL,
      room_id INTEGER NOT NULL,
      start_date DATE NOT NULL,
      end_date DATE NOT NULL,
      rent_amount REAL NOT NULL,
      deposit_amount REAL NOT NULL,
      status TEXT DEFAULT 'active' COLLATE NOCASE CHECK(status IN ('active', 'completed', 'terminated')),
      guarantor_name TEXT COLLATE NOCASE,
      contract_note TEXT COLLATE NOCASE,
      document TEXT,
      FOREIGN KEY (tenant_id) REFERENCES tenants(id),
      FOREIGN KEY (room_id) REFERENCES rooms(id)
    )
  `);

  // üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥-‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü
  db.run(`
    CREATE TABLE IF NOT EXISTS utility_bills (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      contract_id INTEGER NOT NULL,
      water_usage REAL NOT NULL,
      electricity_usage REAL NOT NULL,
      water_price REAL NOT NULL,
      electricity_price REAL NOT NULL,
      total_amount REAL NOT NULL,
      billing_date DATE NOT NULL,
      status TEXT DEFAULT 'pending' COLLATE NOCASE CHECK(status IN ('pending', 'paid')),
      FOREIGN KEY (contract_id) REFERENCES contracts(id)
    )
  `);
// üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
db.run(`
  CREATE TABLE IF NOT EXISTS bookings (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    room_id INTEGER NOT NULL,
    name TEXT NOT NULL COLLATE NOCASE,
    phone TEXT NOT NULL,
    email TEXT NOT NULL COLLATE NOCASE,
    check_in_date DATE NOT NULL,
    duration INTEGER NOT NULL,
    special_requests TEXT COLLATE NOCASE,
    status TEXT DEFAULT 'pending' COLLATE NOCASE CHECK(status IN ('pending', 'confirmed', 'cancelled', 'completed')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (room_id) REFERENCES rooms(id)
  )
`);
  // üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
  db.run(`
    CREATE TABLE IF NOT EXISTS payments (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      contract_id INTEGER NOT NULL,
      amount REAL NOT NULL,
      payment_date DATE NOT NULL,
      method TEXT NOT NULL COLLATE NOCASE CHECK(method IN ('cash', 'bank_transfer', 'credit_card')),
      status TEXT DEFAULT 'completed' COLLATE NOCASE CHECK(status IN ('completed', 'pending', 'failed')),
      FOREIGN KEY (contract_id) REFERENCES contracts(id)
    )
  `);

  // üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°
  db.run(`
    CREATE TABLE IF NOT EXISTS maintenance_requests (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      room_id INTEGER NOT NULL,
      description TEXT NOT NULL COLLATE NOCASE,
      status TEXT DEFAULT 'pending' COLLATE NOCASE CHECK(status IN ('pending', 'in_progress', 'completed')),
      reported_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      resolved_date TIMESTAMP,
      technician TEXT COLLATE NOCASE,
      FOREIGN KEY (room_id) REFERENCES rooms(id)
    )
  `);

  // üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
  db.run(`
    CREATE TABLE IF NOT EXISTS reports (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      title TEXT NOT NULL COLLATE NOCASE,
      description TEXT NOT NULL COLLATE NOCASE,
      category TEXT NOT NULL COLLATE NOCASE CHECK(category IN ('financial', 'room', 'maintenance')),
      resolved_status TEXT DEFAULT 'pending' COLLATE NOCASE CHECK(resolved_status IN ('pending', 'resolved')),
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
  `);

  // üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  db.run(`
    CREATE TABLE IF NOT EXISTS notifications (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id INTEGER NOT NULL,
      type TEXT NOT NULL COLLATE NOCASE CHECK(type IN ('payment_due', 'contract_expiry', 'maintenance_update')),
      message TEXT NOT NULL COLLATE NOCASE,
      status TEXT DEFAULT 'unread' COLLATE NOCASE CHECK(status IN ('unread', 'read')),
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES users(id)
    )
  `);

  console.log("‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
  initializeAdmin();
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö (admin) ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
const initializeAdmin = () => {
  const adminUsername = "admin";
  const adminPassword = "rorganize";
  const hashedPassword = bcrypt.hashSync(adminPassword, 10);

  db.get("SELECT * FROM users WHERE username = ?", [adminUsername], (err, row) => {
    if (!row) {
      db.run(
        `INSERT INTO users (username, password, role) VALUES (?, ?, 'admin')`,
        [adminUsername, hashedPassword],
        (err) => {
          if (err) {
            console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° Admin ‡πÑ‡∏î‡πâ:", err.message);
          } else {
            console.log("‚úÖ Admin ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! (username: admin, password: rorganize)");
          }
        }
      );
    } else {
      console.log("‚ö†Ô∏è Admin ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà");
    }
  });
};

module.exports = db;